Index: src/ar/edu/itba/SearchStrategy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ar.edu.itba;\r\n\r\nimport java.util.*;\r\n\r\npublic interface SearchStrategy {\r\n\r\n    int[] dir_x = {-1, 0, 1, 0};\r\n    int[] dir_y = {0, 1, 0, -1};\r\n\r\n    void findSolution(Board board);\r\n\r\n    class StateNode implements Cloneable{\r\n        ArrayList<StateNode> children;\r\n        StateNode prev;\r\n        Player player;\r\n        Set<Baggage> baggs;\r\n        String direction;\r\n\r\n\r\n        StateNode(String direction,Player player,Set<Baggage> baggs,StateNode prev){\r\n            this.direction = direction;\r\n            this.player  = player;\r\n            this.baggs = baggs;\r\n            this.prev = prev;\r\n            children = new ArrayList<>();\r\n\r\n        }\r\n\r\n\r\n\r\n        private StateNode checkMove(char direction,Board board) {\r\n\r\n            if (checkWallCollision(player, direction, board) || checkBagCollision(direction, board)) {\r\n\r\n                return null;\r\n            }\r\n            return this;\r\n\r\n        }\r\n\r\n        private boolean checkBagCollision(char direction,Board board) {\r\n\r\n\r\n            switch (direction) {\r\n\r\n                case 'L':\r\n\r\n                    for (Baggage bag : baggs) {\r\n\r\n                        if (player.isLeftCollision(bag)) {\r\n\r\n                            for (Baggage item : baggs) {\r\n                                {\r\n\r\n\r\n                                    if (!bag.equals(item)) {\r\n\r\n                                        if (bag.isLeftCollision(item)) {\r\n                                            return true;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (checkWallCollision(bag, 'L', board)) {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                            baggs.remove(bag);\r\n                            bag.move(-board.SPACE,0 );\r\n                            baggs.add(bag);\r\n                        }\r\n                    }\r\n                        return false;\r\n\r\n                        case 'R':\r\n\r\n                            for (Baggage bag : baggs) {\r\n\r\n\r\n\r\n                                if (player.isRightCollision(bag)) {\r\n\r\n                                    for (Baggage item : baggs) {\r\n\r\n\r\n\r\n                                        if (!bag.equals(item)) {\r\n\r\n                                            if (bag.isRightCollision(item)) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n\r\n                                        if (checkWallCollision(bag, 'R',board)) {\r\n                                            return true;\r\n                                        }\r\n                                    }\r\n                                    baggs.remove(bag);\r\n                                    bag.move(board.SPACE,0 );\r\n                                    baggs.add(bag);\r\n                                }\r\n                            }\r\n                            return false;\r\n\r\n                        case 'T':\r\n\r\n                            for (Baggage bag : baggs) {\r\n\r\n\r\n\r\n                                if (player.isTopCollision(bag)) {\r\n\r\n                                    for (Baggage item : baggs) {\r\n\r\n\r\n\r\n                                        if (!bag.equals(item)) {\r\n\r\n                                            if (bag.isTopCollision(item)) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n\r\n                                        if (checkWallCollision(bag, 'T',board)) {\r\n                                            return true;\r\n                                        }\r\n                                    }\r\n                                    baggs.remove(bag);\r\n                                    bag.move(0,-board.SPACE );\r\n                                    baggs.add(bag);\r\n                                }\r\n                            }\r\n\r\n                            return false;\r\n\r\n                        case 'B':\r\n\r\n                            for (Baggage bag : baggs) {\r\n\r\n\r\n\r\n                                if (player.isBottomCollision(bag)) {\r\n\r\n                                    for (Baggage item : baggs) {\r\n\r\n\r\n\r\n                                        if (!bag.equals(item)) {\r\n\r\n                                            if (bag.isBottomCollision(item)) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n\r\n                                        if (checkWallCollision(bag, 'B',board)) {\r\n\r\n                                            return true;\r\n                                        }\r\n                                    }\r\n\r\n                                    baggs.remove(bag);\r\n                                    bag.move(0, board.SPACE);\r\n                                    baggs.add(bag);\r\n\r\n                                }\r\n                            }\r\n\r\n                            break;\r\n\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n                    return false;\r\n            }\r\n\r\n\r\n        private boolean checkWallCollision(Actor actor, char direction, Board board) {\r\n            List<Wall> walls = board.getWalls();\r\n            switch (direction) {\r\n\r\n                case 'L':\r\n\r\n                    for (int i = 0; i < walls.size(); i++) {\r\n\r\n                        Wall wall = walls.get(i);\r\n\r\n                        if (actor.isLeftCollision(wall)) {\r\n\r\n                            return true;\r\n                        }\r\n                    }\r\n\r\n                    return false;\r\n\r\n                case 'R':\r\n\r\n                    for (int i = 0; i < walls.size(); i++) {\r\n\r\n                        Wall wall = walls.get(i);\r\n\r\n                        if (actor.isRightCollision(wall)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n\r\n                    return false;\r\n\r\n                case 'T':\r\n\r\n                    for (int i = 0; i < walls.size(); i++) {\r\n\r\n                        Wall wall = walls.get(i);\r\n\r\n                        if (actor.isTopCollision(wall)) {\r\n\r\n                            return true;\r\n                        }\r\n                    }\r\n\r\n                    return false;\r\n\r\n                case 'B':\r\n\r\n                    for (int i = 0; i < walls.size(); i++) {\r\n\r\n                        Wall wall = walls.get(i);\r\n\r\n                        if (actor.isBottomCollision(wall)) {\r\n\r\n                            return true;\r\n                        }\r\n                    }\r\n\r\n                    return false;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n\r\n\r\n        /*     public ArrayList<StateNode> getChildren(Board board){\r\n            if(children.isEmpty()){\r\n                for(int i = 0; i < directions.length; i++){\r\n                    if(board.canMove(player,baggs,i)){\r\n                        StateNode child = new StateNode(directions[i],player,baggs);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n*/\r\n        public StateNode getPrev() {\r\n            return prev;\r\n        }\r\n\r\n        public String getDirection() {\r\n            return direction;\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object o) {\r\n            if (this == o) return true;\r\n            if (o == null || getClass() != o.getClass()) return false;\r\n            StateNode stateNode = (StateNode) o;\r\n\r\n            return player.equals(stateNode.player) &&\r\n                    baggs.equals(stateNode.baggs);\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return Objects.hash(player, baggs);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ar/edu/itba/SearchStrategy.java	(revision edd0f5c1b02e6db60370194d0c9b1707165618b2)
+++ src/ar/edu/itba/SearchStrategy.java	(date 1597170150814)
@@ -67,7 +67,7 @@
 
                             }
                             baggs.remove(bag);
-                            bag.move(-board.SPACE,0 );
+                            bag.move(-Board.SPACE,0 );
                             baggs.add(bag);
                         }
                     }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"false\" project-jdk-name=\"12\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision edd0f5c1b02e6db60370194d0c9b1707165618b2)
+++ .idea/misc.xml	(date 1597168219327)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="false" project-jdk-name="12" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="false" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/sia_tp1.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/resources\" type=\"java-resource\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"12\" jdkType=\"JavaSDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/sia_tp1.iml	(revision edd0f5c1b02e6db60370194d0c9b1707165618b2)
+++ .idea/sia_tp1.iml	(date 1597168252847)
@@ -6,7 +6,7 @@
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/resources" type="java-resource" />
     </content>
-    <orderEntry type="jdk" jdkName="12" jdkType="JavaSDK" />
+    <orderEntry type="jdk" jdkName="1.8" jdkType="JavaSDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
