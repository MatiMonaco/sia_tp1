Index: src/ar/edu/itba/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ar.edu.itba;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Graphics;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.KeyAdapter;\r\nimport java.awt.event.KeyEvent;\r\n\r\nimport java.beans.PropertyChangeListener;\r\nimport java.util.*;\r\nimport javax.swing.*;\r\nimport javax.swing.Timer;\r\n\r\npublic class Board extends JPanel {\r\n\r\n    public static final int OFFSET = 30;\r\n    public static final int SPACE = 20;\r\n    private List<Wall> walls;\r\n    private Set<Baggage> baggs;\r\n    private List<Area> areas;\r\n    private String solution;\r\n    private Player player;\r\n    private int w = 0;\r\n    private int h = 0;\r\n    \r\n    private boolean isCompleted = false;\r\n    private int i = 0;\r\n    private  Timer timer = new Timer(250, new ActionListener() {\r\n\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n\r\n            if(i< solution.length()){\r\n                char key = solution.charAt(i++);\r\n\r\n                movePlayer(key);\r\n                repaint();\r\n\r\n            }else{\r\n                ((Timer)e.getSource()).stop();\r\n            }\r\n\r\n\r\n        }\r\n    });\r\n\r\n/*    private String level\r\n            = \"    ######\\n\"\r\n            + \"    ##   #\\n\"\r\n            + \"    ##$  #\\n\"\r\n            + \"  ####  $##\\n\"\r\n            + \"  ##  $ $ #\\n\"\r\n            + \"#### # ## #   ######\\n\"\r\n            + \"##   # ## #####  ..#\\n\"\r\n            + \"## $  $          ..#\\n\"\r\n            + \"###### ### #@##  ..#\\n\"\r\n            + \"    ##     #########\\n\"\r\n            + \"    ########\\n\";*/\r\n\r\n//    private String level =      \"      ###\\n\"+\r\n//                                \"      #.#\\n\"+\r\n//                                \"  #####.#####\\n\"+\r\n//                                \" ##         ##\\n\"+\r\n//                                \"##  # # # #  ##\\n\"+\r\n//                                \"#  ##     ##  #\\n\"+\r\n//                                \"# ##  # #  ## #\\n\"+\r\n//                                \"#     $@$     #\\n\"+\r\n//                                \"####  ###  ####\\n\"+\r\n//                                \"   #### ####\\n\";\r\n\r\n private String level =         \"  ####    \\n\" +\r\n                                \" ##  ##   \\n\" +\r\n                                \"## $  ####\\n\" +\r\n                                \"#  ..$  @#\\n\" +\r\n                                \"# $..#   #\\n\" +\r\n                                \"#   $#####\\n\" +\r\n                                \"##   #    \\n\" +\r\n                                \" ##  #    \\n\" +\r\n                                \"  #### \";\r\n\r\n// private String level =         \"#########\\n\" +\r\n//                                \"#.$ @ $.#\\n\" +\r\n//                                \"#       #\\n\" +\r\n//                                \"#    ####\\n\" +\r\n//                                \"#.$   $.#\\n\" +\r\n//                                \"#########\\n\";\r\n\r\n\r\n    public Board()  {\r\n\r\n        initBoard();\r\n\r\n    }\r\n\r\n    private void initBoard() {\r\n\r\n        addKeyListener(new TAdapter());\r\n        setFocusable(true);\r\n        initWorld();\r\n//        BFSStrategy bfs = new BFSStrategy();\r\n//        try {\r\n//            solution =  bfs.findSolution(this);\r\n//\r\n//        } catch (CloneNotSupportedException e) {\r\n//            e.printStackTrace();\r\n//        }\r\n\r\n        BFSStrategy alg = new BFSStrategy();\r\n//        DFSStrategy alg = new DFSStrategy();\r\n//        IDDFSStrategy alg = new IDDFSStrategy();\r\n        try {\r\n            solution =  alg.findSolution(this);\r\n\r\n        } catch (CloneNotSupportedException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public int getBoardWidth() {\r\n        return this.w;\r\n    }\r\n\r\n    public int getBoardHeight() {\r\n        return this.h;\r\n    }\r\n\r\n    private void initWorld() {\r\n        \r\n        walls = new ArrayList<>();\r\n        baggs = new HashSet<>();\r\n        areas = new ArrayList<>();\r\n\r\n        int x = OFFSET;\r\n        int y = OFFSET;\r\n\r\n        Wall wall;\r\n        Baggage b;\r\n        Area a;\r\n\r\n        for (int i = 0; i < level.length(); i++) {\r\n\r\n            char item = level.charAt(i);\r\n\r\n            switch (item) {\r\n\r\n                case '\\n':\r\n                    y += SPACE;\r\n\r\n                    if (this.w < x) {\r\n                        this.w = x;\r\n                    }\r\n\r\n                    x = OFFSET;\r\n                    break;\r\n\r\n                case '#':\r\n                    wall = new Wall(x, y);\r\n                    walls.add(wall);\r\n                    x += SPACE;\r\n                    break;\r\n\r\n                case '$':\r\n                    b = new Baggage(x, y);\r\n                    baggs.add(b);\r\n                    x += SPACE;\r\n                    break;\r\n\r\n                case '.':\r\n                    a = new Area(x, y);\r\n                    areas.add(a);\r\n                    x += SPACE;\r\n                    break;\r\n\r\n                case '@':\r\n                    player = new Player(x, y);\r\n                    x += SPACE;\r\n                    break;\r\n\r\n                case ' ':\r\n                    x += SPACE;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            h = y;\r\n        }\r\n    }\r\n\r\n    private class TAdapter extends KeyAdapter {\r\n\r\n        @Override\r\n        public void keyPressed(KeyEvent e) {\r\n            super.keyPressed(e);\r\n\r\n            int key = e.getKeyCode();\r\n            if (key == KeyEvent.VK_S) {\r\n                if (!solution.isEmpty()) {\r\n\r\n                    showSolution();\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n        private void buildWorld(Graphics g) {\r\n\r\n        g.setColor(new Color(250, 240, 170));\r\n        g.fillRect(0, 0, this.getWidth(), this.getHeight());\r\n\r\n        ArrayList<Actor> world = new ArrayList<>();\r\n\r\n        world.addAll(walls);\r\n        world.addAll(areas);\r\n        world.addAll(baggs);\r\n        world.add(player);\r\n\r\n            for (Actor item : world) {\r\n\r\n                if (item instanceof Player || item instanceof Baggage) {\r\n\r\n                    g.drawImage(item.getImage(), item.getX() + 2, item.getY() + 2, this);\r\n                } else {\r\n\r\n                    g.drawImage(item.getImage(), item.getX(), item.getY(), this);\r\n                }\r\n\r\n\r\n            }\r\n    }\r\n\r\n    @Override\r\n    public void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        buildWorld(g);\r\n    }\r\n\r\n\r\n      public void showSolution() {\r\n\r\n          timer.start();\r\n\r\n\r\n      }\r\n\r\n      private void movePlayer(char direction){\r\n          switch (direction) {\r\n\r\n              case 'L':\r\n\r\n                  if (checkWallCollision(player,\r\n                          'L')) {\r\n                      return;\r\n                  }\r\n\r\n                  if (checkBagCollision('L')) {\r\n                      return;\r\n                  }\r\n\r\n                  player.move(-SPACE, 0);\r\n\r\n                  break;\r\n\r\n              case 'R':\r\n\r\n                  if (checkWallCollision(player, 'R')) {\r\n                      return;\r\n                  }\r\n\r\n                  if (checkBagCollision('R')) {\r\n                      return;\r\n                  }\r\n\r\n                  player.move(SPACE, 0);\r\n\r\n                  break;\r\n\r\n              case 'T':\r\n\r\n                  if (checkWallCollision(player, 'T')) {\r\n                      return;\r\n                  }\r\n\r\n                  if (checkBagCollision('T')) {\r\n                      return;\r\n                  }\r\n\r\n                  player.move(0, -SPACE);\r\n\r\n                  break;\r\n\r\n              case 'B':\r\n\r\n                  if (checkWallCollision(player, 'B')) {\r\n                      return;\r\n                  }\r\n\r\n                  if (checkBagCollision('B')) {\r\n                      return;\r\n                  }\r\n\r\n                  player.move(0, SPACE);\r\n\r\n                  break;\r\n\r\n\r\n              default:\r\n                  break;\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n      }\r\n    private boolean checkWallCollision(Actor actor, char direction) {\r\n\r\n        switch (direction) {\r\n\r\n            case 'L':\r\n\r\n                for (Wall wall : walls) {\r\n\r\n                    if (actor.isLeftCollision(wall)) {\r\n\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n\r\n            case 'R':\r\n\r\n                for (Wall wall : walls) {\r\n\r\n                    if (actor.isRightCollision(wall)) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n\r\n            case 'T':\r\n\r\n                for (Wall wall : walls) {\r\n\r\n                    if (actor.isTopCollision(wall)) {\r\n\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n\r\n            case 'B':\r\n\r\n                for (Wall wall : walls) {\r\n\r\n                    if (actor.isBottomCollision(wall)) {\r\n\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private boolean checkBagCollision(char direction) {\r\n\r\n        Iterator<Baggage> it1 = baggs.iterator();\r\n        List<Baggage> toAdd = new ArrayList<>();\r\n        switch (direction) {\r\n\r\n            case 'L':\r\n\r\n\r\n                while(it1.hasNext()) {\r\n                    Baggage bag = it1.next();\r\n                    if (player.isLeftCollision(bag)) {\r\n                        for (Baggage item : baggs) {\r\n                            {\r\n\r\n\r\n                                if (!bag.equals(item)) {\r\n\r\n                                    if (bag.isLeftCollision(item)) {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n\r\n                                if (checkWallCollision(bag, 'L')) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        it1.remove();\r\n                        bag.move(-SPACE,0 );\r\n                        toAdd.add(bag);\r\n                        break;\r\n                    }\r\n                }\r\n                baggs.addAll(toAdd);\r\n\r\n\r\n                return false;\r\n\r\n            case 'R':\r\n\r\n\r\n                while(it1.hasNext()) {\r\n                    Baggage bag = it1.next();\r\n                    if (player.isRightCollision(bag)) {\r\n                        for (Baggage item : baggs) {\r\n                            {\r\n\r\n\r\n                                if (!bag.equals(item)) {\r\n\r\n                                    if (bag.isRightCollision(item)) {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n\r\n                                if (checkWallCollision(bag, 'R')) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        it1.remove();\r\n                        bag.move(SPACE,0 );\r\n                        toAdd.add(bag);\r\n                        break;\r\n                    }\r\n                }\r\n                baggs.addAll(toAdd);\r\n\r\n\r\n                return false;\r\n\r\n            case 'T':\r\n\r\n                while(it1.hasNext()) {\r\n                    Baggage bag = it1.next();\r\n                    if (player.isTopCollision(bag)) {\r\n                        for (Baggage item : baggs) {\r\n                            {\r\n\r\n\r\n                                if (!bag.equals(item)) {\r\n\r\n                                    if (bag.isTopCollision(item)) {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n\r\n                                if (checkWallCollision(bag, 'T')) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        it1.remove();\r\n                        bag.move(0,-Board.SPACE );\r\n                        toAdd.add(bag);\r\n                        break;\r\n                    }\r\n                }\r\n                baggs.addAll(toAdd);\r\n\r\n\r\n                return false;\r\n\r\n            case 'B':\r\n\r\n\r\n                while(it1.hasNext()) {\r\n                    Baggage bag = it1.next();\r\n                    if (player.isBottomCollision(bag)) {\r\n                        for (Baggage item : baggs) {\r\n                            {\r\n\r\n\r\n                                if (!bag.equals(item)) {\r\n\r\n                                    if (bag.isBottomCollision(item)) {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n\r\n                                if (checkWallCollision(bag, 'B')) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        it1.remove();\r\n                        bag.move(0,Board.SPACE );\r\n                        toAdd.add(bag);\r\n                        break;\r\n                    }\r\n                }\r\n                baggs.addAll(toAdd);\r\n\r\n\r\n                return false;\r\n\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    public boolean isCompleted(Set<Baggage> baggsSet) {\r\n\r\n        int nOfBags = baggsSet.size();\r\n       Baggage[] baggsArray = baggsSet.toArray(new Baggage[0]);\r\n        int finishedBags = 0;\r\n\r\n        for (int i = 0; i < nOfBags; i++) {\r\n            \r\n            Baggage bag = baggsArray[i];\r\n            \r\n            for (int j = 0; j < nOfBags; j++) {\r\n                \r\n                Area area =  areas.get(j);\r\n                \r\n                if (bag.getX() == area.getX() && bag.getY() == area.getY()) {\r\n                    \r\n                    finishedBags += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        /* isCompleted = true;\r\n            repaint();*/\r\n        return finishedBags == nOfBags;\r\n    }\r\n\r\n    public void restartLevel() {\r\n\r\n        areas.clear();\r\n        baggs.clear();\r\n        walls.clear();\r\n\r\n        initWorld();\r\n\r\n        if (isCompleted) {\r\n            isCompleted = false;\r\n        }\r\n    }\r\n\r\n    public Set<Baggage> getBaggs() {\r\n        return baggs;\r\n    }\r\n\r\n    public Player getPlayer() {\r\n        return player;\r\n    }\r\n\r\n    public List<Wall> getWalls() {\r\n        return walls;\r\n    }\r\n\r\n    public List<Area> getAreas() {\r\n        return areas;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ar/edu/itba/Board.java	(revision 6d640252f067da251649ed9a5bcc089e2959ed42)
+++ src/ar/edu/itba/Board.java	(date 1597255039617)
@@ -69,15 +69,22 @@
 //                                "####  ###  ####\n"+
 //                                "   #### ####\n";
 
- private String level =         "  ####    \n" +
-                                " ##  ##   \n" +
-                                "## $  ####\n" +
-                                "#  ..$  @#\n" +
-                                "# $..#   #\n" +
-                                "#   $#####\n" +
-                                "##   #    \n" +
-                                " ##  #    \n" +
-                                "  #### ";
+// private String level =         "  ####    \n" +
+//                                " ##  ##   \n" +
+//                                "## $  ####\n" +
+//                                "#  ..$  @#\n" +
+//                                "# $..#   #\n" +
+//                                "#   $#####\n" +
+//                                "##   #    \n" +
+//                                " ##  #    \n" +
+//                                "  #### ";
+
+ private String level =         "########\n" +
+                                "#  ..$ #\n" +
+                                "# $@ $ #\n" +
+                                "# $..  #\n" +
+                                "########";
+
 
 // private String level =         "#########\n" +
 //                                "#.$ @ $.#\n" +
